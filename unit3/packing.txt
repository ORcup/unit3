class circle{
    public:
     int x;
     int y;
     int r;
};
circle s1,s2,s3,s4;        //定义矩形的四条边在circle类里
class conner{              //定义圆与矩形或圆与圆相切剩下的空间
    public:
     circle a;
     circle b;
     circle c;
};
int m_circle(int m){
    circle* cir[m];
    cir[1].x=cir[1].y=0;cir[1].r=1;   //建立第一个圆
    conner* con[3*m+1]=NULL;               //第一圆会产生四个剩余空间，后面每个圆会产生三个
    con[1].a=s1;con[1].b=s2;con[1].c=cir[1];
    con[2].a=s2;con[2].b=s3;con[2].c=cir[1];
    con[3].a=s3;con[3].b=s4;con[3].c=cir[1];
    con[4].a=s4;con[4].b=s1;con[4].c=cir[1];//剩余空间（conner）是由它的三条边界来定义的                   
    for(int i=2;i<=m;i++){
        cir[i].x=findx(con[1]);     //在最大的剩余空间中寻求内接圆
        cir[i].y=findy(con[1]);
        cir[i].r=findr(cir[i],con[1]);
        con[3*i-1].a=con[1].a;con[3*i-1].b=con[1].b;con[3*i-1].c=cir[i];  //创建新的剩余空间并重新排序
        con[3*i].a=con[1].b;con[3*i].b=con[1].c;con[3*i].c=cir[i];
        con[3*i+1].a=con[1].c;con[3*i+1].b=con[1].a;con[3*i+1].c=cir[i];
        max(conner,con[3*i-1],con[3*i],con[3*i+1]);//将Conner按面积由大到小排序
    }
};
void max(conner*c[m],conner*a,conner*b,conner*c){
    insert(c[m],a);
    insert(c[m],b);
    insert(c[m],c);
};
void insert(conner*c[m],conner*a){//插入排序来重排conner，通过判断这个剩余空间能否插入新圆而不相交来代替比较面积
    conner*n=&a;
    for(int i=0;i<=size(c[m]);i++){
        int L[3];
        L[1]=sqrt((c[m-i].ax-a.x)^2+(c[m-i].ay-a.y)^2)-c[m-i].ar
        L[2]=sqrt((c[m-i].bx-a.x)^2+(c[m-i].by-a.y)^2)-c[m-i].br
        L[3]=sqrt((c[m-i].cx-a.x)^2+(c[m-i].cy-a.y)^2)-c[m-i].cr
        if(a.r > min(L)){
            &a=&c[m+1];
            c[m-i]=*n;
        }
        if(a.r < min(L)){
            end;
        }
    }
}
int findx(conner*a){
    return((a.ax+a.bx+a.cx)/3)//取中值
}；
int findy(conner*a){
    return((a.ay+a.by+a.cy)/3)//取中值
}；
int findr(circle*a,conner*b){//按步长试探半径
    int det=0.01;
    for(int i=1;;i++){
        a.r=i*det;
        int L[3];
        L[1]=sqrt((b.ax-a.x)^2+(b.ay-a.y)^2)-b.ar
        L[2]=sqrt((b.bx-a.x)^2+(b.by-a.y)^2)-b.br
        L[3]=sqrt((b.cx-a.x)^2+(b.cy-a.y)^2)-b.cr
        if(a.r >= min(L)){
            return(i*det);
            end;
        }
    }
}；
void output{
    for(int i=1;i<m;i++){
        cout<<"("<<cir[i].x<<","<<cir[i].y<<")"<<"  "<<"R="<<cir[i].r;
        cout<<endl;
    }
};
int main(){
    int m;
    cout<<"m="<<" ";
    cin>>m;
    m_circle(m);
    output；
}